---
apiVersion: v1
kind: ConfigMap
metadata:
  name: graph-name-neo4j-core-config
data:
  NEO4J_ACCEPT_LICENSE_AGREEMENT: "yes"
  NEO4J_dbms_mode: CORE
  AUTH_ENABLED: "true"
  NEO4J_dbms_default__database: "neo4j"
  NEO4J_causal__clustering_discovery__type: K8S
  NEO4J_causal__clustering_kubernetes_label__selector: "neo4j.com/cluster=graph-name-neo4j,neo4j.com/discovery=true"
  NEO4J_dbms_connector_bolt_listen__address: 0.0.0.0:7687
  NEO4J_dbms_connector_http_listen__address: 0.0.0.0:7474
  NEO4J_dbms_connector_https_listen__address: 0.0.0.0:7473
  NEO4J_causal__clustering_minimum__core__cluster__size__at__formation: "3"
  NEO4J_causal__clustering_minimum__core__cluster__size__at__runtime: "2"
  NEO4J_dbms_jvm_additional: "-XX:+ExitOnOutOfMemoryError"
---
# Source: neo4j/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: graph-name-neo4j-secrets
  labels:
    app.kubernetes.io/name: neo4j
type: Opaque
data:
  neo4j-password: "cVB4R0dVM091bw=="
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: neo4j-sa
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: service-reader
rules:
  - apiGroups: [""] # "" indicates the core API group
    resources: ["services"]
    verbs: ["get", "watch", "list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: neo4j-sa-to-service-reader-binding
subjects:
  - kind: ServiceAccount
    name: neo4j-sa
roleRef:
  # "roleRef" specifies the binding to a Role / ClusterRole
  kind: Role #this must be Role or ClusterRole
  name: service-reader # this must match the name of the Role or ClusterRole you wish to bind to
  apiGroup: rbac.authorization.k8s.io
---